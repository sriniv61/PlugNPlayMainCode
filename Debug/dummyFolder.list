
dummyFolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d24  08002d24  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d2c  08002d2c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000018  08002d4c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002d4c  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bc6  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000146e  00000000  00000000  00027c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e8  00000000  00000000  00029080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000730  00000000  00000000  00029868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000186e  00000000  00000000  00029f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b4e  00000000  00000000  0002b806  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0029  00000000  00000000  00032354  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f237d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb4  00000000  00000000  000f23f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002cf4 	.word	0x08002cf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08002cf4 	.word	0x08002cf4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <getButtonPress>:
 *      Author: Gokul Srinivasan
 */

#include "buttons.h"

buttonPress getButtonPress(SPI_HandleTypeDef * hspi2){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
	static uint8_t a = ~(0x3f);
	static uint8_t b = ~(0x9f);
	static uint8_t select = ~(0xcf);
	static uint8_t start = ~(0xe7);

	HAL_StatusTypeDef spiStatus = HAL_OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73bb      	strb	r3, [r7, #14]
	uint8_t latch [1] = {0x80};
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	733b      	strb	r3, [r7, #12]
	uint8_t data [1] = {0xff}; //Initializing to when no button is being pressed
 80004d8:	23ff      	movs	r3, #255	; 0xff
 80004da:	723b      	strb	r3, [r7, #8]

	buttonPress buttonPress = NoPress; //1=a, 2=up, 3=down, 4=right, 5=left, 6=start, 7=select, 8=b
 80004dc:	2308      	movs	r3, #8
 80004de:	73fb      	strb	r3, [r7, #15]

	while(data[0] == 0xff) {
 80004e0:	e012      	b.n	8000508 <getButtonPress+0x40>
		spiStatus = HAL_SPI_TransmitReceive(hspi2, latch, data, 1, HAL_MAX_DELAY);
 80004e2:	f107 0208 	add.w	r2, r7, #8
 80004e6:	f107 010c 	add.w	r1, r7, #12
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2301      	movs	r3, #1
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f001 fdba 	bl	800206c <HAL_SPI_TransmitReceive>
 80004f8:	4603      	mov	r3, r0
 80004fa:	73bb      	strb	r3, [r7, #14]
		HAL_Delay(1);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f000 fe19 	bl	8001134 <HAL_Delay>
		if(spiStatus != HAL_OK) break;
 8000502:	7bbb      	ldrb	r3, [r7, #14]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d103      	bne.n	8000510 <getButtonPress+0x48>
	while(data[0] == 0xff) {
 8000508:	7a3b      	ldrb	r3, [r7, #8]
 800050a:	2bff      	cmp	r3, #255	; 0xff
 800050c:	d0e9      	beq.n	80004e2 <getButtonPress+0x1a>
 800050e:	e000      	b.n	8000512 <getButtonPress+0x4a>
		if(spiStatus != HAL_OK) break;
 8000510:	bf00      	nop
	}

	invertedData = ~(data[0]);
 8000512:	7a3b      	ldrb	r3, [r7, #8]
 8000514:	43db      	mvns	r3, r3
 8000516:	737b      	strb	r3, [r7, #13]

	// a gets highest precedence and so on
	if ((invertedData & a) == a){
 8000518:	4bb3      	ldr	r3, [pc, #716]	; (80007e8 <getButtonPress+0x320>)
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	7b7b      	ldrb	r3, [r7, #13]
 800051e:	4013      	ands	r3, r2
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4bb1      	ldr	r3, [pc, #708]	; (80007e8 <getButtonPress+0x320>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	429a      	cmp	r2, r3
 8000528:	d124      	bne.n	8000574 <getButtonPress+0xac>
		HAL_GPIO_WritePin(GPIOE, A_LED, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000530:	48ae      	ldr	r0, [pc, #696]	; (80007ec <getButtonPress+0x324>)
 8000532:	f001 f8a1 	bl	8001678 <HAL_GPIO_WritePin>

		while(data[0] != 0xff) {
 8000536:	e00f      	b.n	8000558 <getButtonPress+0x90>
			spiStatus = HAL_SPI_TransmitReceive(hspi2, latch, data, 1, HAL_MAX_DELAY);
 8000538:	f107 0208 	add.w	r2, r7, #8
 800053c:	f107 010c 	add.w	r1, r7, #12
 8000540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2301      	movs	r3, #1
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f001 fd8f 	bl	800206c <HAL_SPI_TransmitReceive>
 800054e:	4603      	mov	r3, r0
 8000550:	73bb      	strb	r3, [r7, #14]
			if(spiStatus != HAL_OK) break;
 8000552:	7bbb      	ldrb	r3, [r7, #14]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d103      	bne.n	8000560 <getButtonPress+0x98>
		while(data[0] != 0xff) {
 8000558:	7a3b      	ldrb	r3, [r7, #8]
 800055a:	2bff      	cmp	r3, #255	; 0xff
 800055c:	d1ec      	bne.n	8000538 <getButtonPress+0x70>
 800055e:	e000      	b.n	8000562 <getButtonPress+0x9a>
			if(spiStatus != HAL_OK) break;
 8000560:	bf00      	nop
		}

		HAL_GPIO_WritePin(GPIOE, A_LED, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000568:	48a0      	ldr	r0, [pc, #640]	; (80007ec <getButtonPress+0x324>)
 800056a:	f001 f885 	bl	8001678 <HAL_GPIO_WritePin>

		buttonPress = APress;
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
 8000572:	e157      	b.n	8000824 <getButtonPress+0x35c>
	}
	else if ((invertedData & up) == up){
 8000574:	4b9e      	ldr	r3, [pc, #632]	; (80007f0 <getButtonPress+0x328>)
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	7b7b      	ldrb	r3, [r7, #13]
 800057a:	4013      	ands	r3, r2
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b9c      	ldr	r3, [pc, #624]	; (80007f0 <getButtonPress+0x328>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	429a      	cmp	r2, r3
 8000584:	d122      	bne.n	80005cc <getButtonPress+0x104>
		HAL_GPIO_TogglePin(GPIOD, ORANGE_TOPLED);
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	489a      	ldr	r0, [pc, #616]	; (80007f4 <getButtonPress+0x32c>)
 800058c:	f001 f88d 	bl	80016aa <HAL_GPIO_TogglePin>

		while(data[0] != 0xff) {
 8000590:	e00f      	b.n	80005b2 <getButtonPress+0xea>
			spiStatus = HAL_SPI_TransmitReceive(hspi2, latch, data, 1, HAL_MAX_DELAY);
 8000592:	f107 0208 	add.w	r2, r7, #8
 8000596:	f107 010c 	add.w	r1, r7, #12
 800059a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2301      	movs	r3, #1
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f001 fd62 	bl	800206c <HAL_SPI_TransmitReceive>
 80005a8:	4603      	mov	r3, r0
 80005aa:	73bb      	strb	r3, [r7, #14]
			if(spiStatus != HAL_OK) break;
 80005ac:	7bbb      	ldrb	r3, [r7, #14]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d103      	bne.n	80005ba <getButtonPress+0xf2>
		while(data[0] != 0xff) {
 80005b2:	7a3b      	ldrb	r3, [r7, #8]
 80005b4:	2bff      	cmp	r3, #255	; 0xff
 80005b6:	d1ec      	bne.n	8000592 <getButtonPress+0xca>
 80005b8:	e000      	b.n	80005bc <getButtonPress+0xf4>
			if(spiStatus != HAL_OK) break;
 80005ba:	bf00      	nop
		}

		HAL_GPIO_TogglePin(GPIOD, ORANGE_TOPLED);
 80005bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c0:	488c      	ldr	r0, [pc, #560]	; (80007f4 <getButtonPress+0x32c>)
 80005c2:	f001 f872 	bl	80016aa <HAL_GPIO_TogglePin>

		buttonPress = UPress;
 80005c6:	2306      	movs	r3, #6
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e12b      	b.n	8000824 <getButtonPress+0x35c>
	}
	else if((invertedData & down) == down){
 80005cc:	4b8a      	ldr	r3, [pc, #552]	; (80007f8 <getButtonPress+0x330>)
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	7b7b      	ldrb	r3, [r7, #13]
 80005d2:	4013      	ands	r3, r2
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b88      	ldr	r3, [pc, #544]	; (80007f8 <getButtonPress+0x330>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d122      	bne.n	8000624 <getButtonPress+0x15c>
		HAL_GPIO_TogglePin(GPIOD, BLUE_BOTTOMLED);
 80005de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e2:	4884      	ldr	r0, [pc, #528]	; (80007f4 <getButtonPress+0x32c>)
 80005e4:	f001 f861 	bl	80016aa <HAL_GPIO_TogglePin>

		while(data[0] != 0xff) {
 80005e8:	e00f      	b.n	800060a <getButtonPress+0x142>
			spiStatus = HAL_SPI_TransmitReceive(hspi2, latch, data, 1, HAL_MAX_DELAY);
 80005ea:	f107 0208 	add.w	r2, r7, #8
 80005ee:	f107 010c 	add.w	r1, r7, #12
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f001 fd36 	bl	800206c <HAL_SPI_TransmitReceive>
 8000600:	4603      	mov	r3, r0
 8000602:	73bb      	strb	r3, [r7, #14]
			if(spiStatus != HAL_OK) break;
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d103      	bne.n	8000612 <getButtonPress+0x14a>
		while(data[0] != 0xff) {
 800060a:	7a3b      	ldrb	r3, [r7, #8]
 800060c:	2bff      	cmp	r3, #255	; 0xff
 800060e:	d1ec      	bne.n	80005ea <getButtonPress+0x122>
 8000610:	e000      	b.n	8000614 <getButtonPress+0x14c>
			if(spiStatus != HAL_OK) break;
 8000612:	bf00      	nop
		}

		HAL_GPIO_TogglePin(GPIOD, BLUE_BOTTOMLED);
 8000614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000618:	4876      	ldr	r0, [pc, #472]	; (80007f4 <getButtonPress+0x32c>)
 800061a:	f001 f846 	bl	80016aa <HAL_GPIO_TogglePin>

		buttonPress = DPress;
 800061e:	2307      	movs	r3, #7
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e0ff      	b.n	8000824 <getButtonPress+0x35c>
	}
	else if ((invertedData & left) == left){
 8000624:	4b75      	ldr	r3, [pc, #468]	; (80007fc <getButtonPress+0x334>)
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	4013      	ands	r3, r2
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b73      	ldr	r3, [pc, #460]	; (80007fc <getButtonPress+0x334>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	d122      	bne.n	800067c <getButtonPress+0x1b4>
		HAL_GPIO_TogglePin(GPIOD, GREEN_LEFTLED);
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	486e      	ldr	r0, [pc, #440]	; (80007f4 <getButtonPress+0x32c>)
 800063c:	f001 f835 	bl	80016aa <HAL_GPIO_TogglePin>

		while(data[0] != 0xff) {
 8000640:	e00f      	b.n	8000662 <getButtonPress+0x19a>
			spiStatus = HAL_SPI_TransmitReceive(hspi2, latch, data, 1, HAL_MAX_DELAY);
 8000642:	f107 0208 	add.w	r2, r7, #8
 8000646:	f107 010c 	add.w	r1, r7, #12
 800064a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2301      	movs	r3, #1
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f001 fd0a 	bl	800206c <HAL_SPI_TransmitReceive>
 8000658:	4603      	mov	r3, r0
 800065a:	73bb      	strb	r3, [r7, #14]
			if(spiStatus != HAL_OK) break;
 800065c:	7bbb      	ldrb	r3, [r7, #14]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d103      	bne.n	800066a <getButtonPress+0x1a2>
		while(data[0] != 0xff) {
 8000662:	7a3b      	ldrb	r3, [r7, #8]
 8000664:	2bff      	cmp	r3, #255	; 0xff
 8000666:	d1ec      	bne.n	8000642 <getButtonPress+0x17a>
 8000668:	e000      	b.n	800066c <getButtonPress+0x1a4>
			if(spiStatus != HAL_OK) break;
 800066a:	bf00      	nop
		}

		HAL_GPIO_TogglePin(GPIOD, GREEN_LEFTLED);
 800066c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000670:	4860      	ldr	r0, [pc, #384]	; (80007f4 <getButtonPress+0x32c>)
 8000672:	f001 f81a 	bl	80016aa <HAL_GPIO_TogglePin>

		buttonPress = LPress;
 8000676:	2304      	movs	r3, #4
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e0d3      	b.n	8000824 <getButtonPress+0x35c>
	}
	else if ((invertedData & start) == start){
 800067c:	4b60      	ldr	r3, [pc, #384]	; (8000800 <getButtonPress+0x338>)
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	7b7b      	ldrb	r3, [r7, #13]
 8000682:	4013      	ands	r3, r2
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b5e      	ldr	r3, [pc, #376]	; (8000800 <getButtonPress+0x338>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	429a      	cmp	r2, r3
 800068c:	d124      	bne.n	80006d8 <getButtonPress+0x210>
		HAL_GPIO_WritePin(GPIOE, START_LED, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000694:	4855      	ldr	r0, [pc, #340]	; (80007ec <getButtonPress+0x324>)
 8000696:	f000 ffef 	bl	8001678 <HAL_GPIO_WritePin>

		while(data[0] != 0xff) {
 800069a:	e00f      	b.n	80006bc <getButtonPress+0x1f4>
			spiStatus = HAL_SPI_TransmitReceive(hspi2, latch, data, 1, HAL_MAX_DELAY);
 800069c:	f107 0208 	add.w	r2, r7, #8
 80006a0:	f107 010c 	add.w	r1, r7, #12
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2301      	movs	r3, #1
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f001 fcdd 	bl	800206c <HAL_SPI_TransmitReceive>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73bb      	strb	r3, [r7, #14]
			if(spiStatus != HAL_OK) break;
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d103      	bne.n	80006c4 <getButtonPress+0x1fc>
		while(data[0] != 0xff) {
 80006bc:	7a3b      	ldrb	r3, [r7, #8]
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d1ec      	bne.n	800069c <getButtonPress+0x1d4>
 80006c2:	e000      	b.n	80006c6 <getButtonPress+0x1fe>
			if(spiStatus != HAL_OK) break;
 80006c4:	bf00      	nop
		}

		HAL_GPIO_WritePin(GPIOE, START_LED, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	4847      	ldr	r0, [pc, #284]	; (80007ec <getButtonPress+0x324>)
 80006ce:	f000 ffd3 	bl	8001678 <HAL_GPIO_WritePin>

		buttonPress = StPress;
 80006d2:	2302      	movs	r3, #2
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	e0a5      	b.n	8000824 <getButtonPress+0x35c>
	}
	else if ((invertedData & select) == select){
 80006d8:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <getButtonPress+0x33c>)
 80006da:	781a      	ldrb	r2, [r3, #0]
 80006dc:	7b7b      	ldrb	r3, [r7, #13]
 80006de:	4013      	ands	r3, r2
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b48      	ldr	r3, [pc, #288]	; (8000804 <getButtonPress+0x33c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d124      	bne.n	8000734 <getButtonPress+0x26c>
		HAL_GPIO_WritePin(GPIOE, SELECT_LED, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f0:	483e      	ldr	r0, [pc, #248]	; (80007ec <getButtonPress+0x324>)
 80006f2:	f000 ffc1 	bl	8001678 <HAL_GPIO_WritePin>

		while(data[0] != 0xff) {
 80006f6:	e00f      	b.n	8000718 <getButtonPress+0x250>
			spiStatus = HAL_SPI_TransmitReceive(hspi2, latch, data, 1, HAL_MAX_DELAY);
 80006f8:	f107 0208 	add.w	r2, r7, #8
 80006fc:	f107 010c 	add.w	r1, r7, #12
 8000700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f001 fcaf 	bl	800206c <HAL_SPI_TransmitReceive>
 800070e:	4603      	mov	r3, r0
 8000710:	73bb      	strb	r3, [r7, #14]
			if(spiStatus != HAL_OK) break;
 8000712:	7bbb      	ldrb	r3, [r7, #14]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d103      	bne.n	8000720 <getButtonPress+0x258>
		while(data[0] != 0xff) {
 8000718:	7a3b      	ldrb	r3, [r7, #8]
 800071a:	2bff      	cmp	r3, #255	; 0xff
 800071c:	d1ec      	bne.n	80006f8 <getButtonPress+0x230>
 800071e:	e000      	b.n	8000722 <getButtonPress+0x25a>
			if(spiStatus != HAL_OK) break;
 8000720:	bf00      	nop
		}

		HAL_GPIO_WritePin(GPIOE, SELECT_LED, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000728:	4830      	ldr	r0, [pc, #192]	; (80007ec <getButtonPress+0x324>)
 800072a:	f000 ffa5 	bl	8001678 <HAL_GPIO_WritePin>

		buttonPress = SePress;
 800072e:	2303      	movs	r3, #3
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e077      	b.n	8000824 <getButtonPress+0x35c>
	}
	else if ((invertedData & b) == b){
 8000734:	4b34      	ldr	r3, [pc, #208]	; (8000808 <getButtonPress+0x340>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	7b7b      	ldrb	r3, [r7, #13]
 800073a:	4013      	ands	r3, r2
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <getButtonPress+0x340>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d124      	bne.n	8000790 <getButtonPress+0x2c8>
		HAL_GPIO_WritePin(GPIOE, B_LED, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074c:	4827      	ldr	r0, [pc, #156]	; (80007ec <getButtonPress+0x324>)
 800074e:	f000 ff93 	bl	8001678 <HAL_GPIO_WritePin>

		while(data[0] != 0xff) {
 8000752:	e00f      	b.n	8000774 <getButtonPress+0x2ac>
			spiStatus = HAL_SPI_TransmitReceive(hspi2, latch, data, 1, HAL_MAX_DELAY);
 8000754:	f107 0208 	add.w	r2, r7, #8
 8000758:	f107 010c 	add.w	r1, r7, #12
 800075c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f001 fc81 	bl	800206c <HAL_SPI_TransmitReceive>
 800076a:	4603      	mov	r3, r0
 800076c:	73bb      	strb	r3, [r7, #14]
			if(spiStatus != HAL_OK) break;
 800076e:	7bbb      	ldrb	r3, [r7, #14]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d103      	bne.n	800077c <getButtonPress+0x2b4>
		while(data[0] != 0xff) {
 8000774:	7a3b      	ldrb	r3, [r7, #8]
 8000776:	2bff      	cmp	r3, #255	; 0xff
 8000778:	d1ec      	bne.n	8000754 <getButtonPress+0x28c>
 800077a:	e000      	b.n	800077e <getButtonPress+0x2b6>
			if(spiStatus != HAL_OK) break;
 800077c:	bf00      	nop
		}

		HAL_GPIO_WritePin(GPIOE, B_LED, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000784:	4819      	ldr	r0, [pc, #100]	; (80007ec <getButtonPress+0x324>)
 8000786:	f000 ff77 	bl	8001678 <HAL_GPIO_WritePin>

		buttonPress = BPress;
 800078a:	2301      	movs	r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	e049      	b.n	8000824 <getButtonPress+0x35c>
	}
	else if ((invertedData & right1) == right1 || (invertedData & right2) == right2){
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <getButtonPress+0x344>)
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	4013      	ands	r3, r2
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <getButtonPress+0x344>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d008      	beq.n	80007b4 <getButtonPress+0x2ec>
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <getButtonPress+0x348>)
 80007a4:	781a      	ldrb	r2, [r3, #0]
 80007a6:	7b7b      	ldrb	r3, [r7, #13]
 80007a8:	4013      	ands	r3, r2
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <getButtonPress+0x348>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d137      	bne.n	8000824 <getButtonPress+0x35c>
		HAL_GPIO_TogglePin(GPIOD, RED_RIGHTled);
 80007b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b8:	480e      	ldr	r0, [pc, #56]	; (80007f4 <getButtonPress+0x32c>)
 80007ba:	f000 ff76 	bl	80016aa <HAL_GPIO_TogglePin>

		while(data[0] != 0xff) {
 80007be:	e00f      	b.n	80007e0 <getButtonPress+0x318>
			spiStatus = HAL_SPI_TransmitReceive(hspi2, latch, data, 1, HAL_MAX_DELAY);
 80007c0:	f107 0208 	add.w	r2, r7, #8
 80007c4:	f107 010c 	add.w	r1, r7, #12
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f001 fc4b 	bl	800206c <HAL_SPI_TransmitReceive>
 80007d6:	4603      	mov	r3, r0
 80007d8:	73bb      	strb	r3, [r7, #14]
			if(spiStatus != HAL_OK) break;
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d119      	bne.n	8000814 <getButtonPress+0x34c>
		while(data[0] != 0xff) {
 80007e0:	7a3b      	ldrb	r3, [r7, #8]
 80007e2:	2bff      	cmp	r3, #255	; 0xff
 80007e4:	d1ec      	bne.n	80007c0 <getButtonPress+0x2f8>
 80007e6:	e016      	b.n	8000816 <getButtonPress+0x34e>
 80007e8:	20000000 	.word	0x20000000
 80007ec:	40021000 	.word	0x40021000
 80007f0:	20000001 	.word	0x20000001
 80007f4:	40020c00 	.word	0x40020c00
 80007f8:	20000002 	.word	0x20000002
 80007fc:	20000003 	.word	0x20000003
 8000800:	20000004 	.word	0x20000004
 8000804:	20000005 	.word	0x20000005
 8000808:	20000006 	.word	0x20000006
 800080c:	20000007 	.word	0x20000007
 8000810:	20000008 	.word	0x20000008
			if(spiStatus != HAL_OK) break;
 8000814:	bf00      	nop
		}

		HAL_GPIO_TogglePin(GPIOD, RED_RIGHTled);
 8000816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <getButtonPress+0x368>)
 800081c:	f000 ff45 	bl	80016aa <HAL_GPIO_TogglePin>

		buttonPress = RPress;
 8000820:	2305      	movs	r3, #5
 8000822:	73fb      	strb	r3, [r7, #15]
	}

	return buttonPress;
 8000824:	7bfb      	ldrb	r3, [r7, #15]

}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40020c00 	.word	0x40020c00

08000834 <My_SPI2_INIT>:

void My_SPI2_INIT(SPI_HandleTypeDef * hspi2){
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]


	HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f64c 4108 	movw	r1, #52232	; 0xcc08
 8000852:	4824      	ldr	r0, [pc, #144]	; (80008e4 <My_SPI2_INIT+0xb0>)
 8000854:	f000 ff10 	bl	8001678 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SPI2_CLK_GPIO_Port, SPI2_CLK_Pin|SPI2_MOSI_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800085e:	4822      	ldr	r0, [pc, #136]	; (80008e8 <My_SPI2_INIT+0xb4>)
 8000860:	f000 ff0a 	bl	8001678 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SPI2_MISO_GPIO_Port, SPI2_MISO_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	4820      	ldr	r0, [pc, #128]	; (80008ec <My_SPI2_INIT+0xb8>)
 800086a:	f000 ff05 	bl	8001678 <HAL_GPIO_WritePin>


	/*Configure GPIO pins : PE10 PE11 PE14 PE15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
 800086e:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 8000872:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000878:	2301      	movs	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <My_SPI2_INIT+0xb0>)
 8000888:	f000 fd5c 	bl	8001344 <HAL_GPIO_Init>


	// Us for SPI2
	GPIO_InitStruct.Pin = SPI2_CLK_Pin|SPI2_MOSI_Pin;
 800088c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000890:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800089e:	2305      	movs	r3, #5
 80008a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	480f      	ldr	r0, [pc, #60]	; (80008e8 <My_SPI2_INIT+0xb4>)
 80008aa:	f000 fd4b 	bl	8001344 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80008ae:	f248 0304 	movw	r3, #32772	; 0x8004
 80008b2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c0:	2305      	movs	r3, #5
 80008c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4808      	ldr	r0, [pc, #32]	; (80008ec <My_SPI2_INIT+0xb8>)
 80008cc:	f000 fd3a 	bl	8001344 <HAL_GPIO_Init>
	hspi2->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2238      	movs	r2, #56	; 0x38
 80008d4:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(hspi2);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f001 fb64 	bl	8001fa4 <HAL_SPI_Init>
}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40020400 	.word	0x40020400
 80008ec:	40020800 	.word	0x40020800

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fbab 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f831 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 f8f9 	bl	8000af4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000902:	f000 f897 	bl	8000a34 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000906:	f000 f8cb 	bl	8000aa0 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  My_SPI2_INIT(&hspi2);
 800090a:	4812      	ldr	r0, [pc, #72]	; (8000954 <main+0x64>)
 800090c:	f7ff ff92 	bl	8000834 <My_SPI2_INIT>

	buttonPress button = NoPress;
 8000910:	2308      	movs	r3, #8
 8000912:	71fb      	strb	r3, [r7, #7]
  //uci_main(&hspi2, &huart2);

  while (1)
  {

	  button = getButtonPress(&hspi2);
 8000914:	480f      	ldr	r0, [pc, #60]	; (8000954 <main+0x64>)
 8000916:	f7ff fdd7 	bl	80004c8 <getButtonPress>
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]

	  HAL_GPIO_TogglePin(GPIOD, ORANGE_TOPLED | BLUE_BOTTOMLED | GREEN_LEFTLED | RED_RIGHTled);
 800091e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <main+0x68>)
 8000924:	f000 fec1 	bl	80016aa <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(GPIOE, SELECT_LED | START_LED | A_LED | B_LED, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
 800092e:	480b      	ldr	r0, [pc, #44]	; (800095c <main+0x6c>)
 8000930:	f000 fea2 	bl	8001678 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000934:	20c8      	movs	r0, #200	; 0xc8
 8000936:	f000 fbfd 	bl	8001134 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, ORANGE_TOPLED | BLUE_BOTTOMLED | GREEN_LEFTLED | RED_RIGHTled);
 800093a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <main+0x68>)
 8000940:	f000 feb3 	bl	80016aa <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(GPIOE, SELECT_LED | START_LED | A_LED | B_LED, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <main+0x6c>)
 800094c:	f000 fe94 	bl	8001678 <HAL_GPIO_WritePin>
	  button = getButtonPress(&hspi2);
 8000950:	e7e0      	b.n	8000914 <main+0x24>
 8000952:	bf00      	nop
 8000954:	20000034 	.word	0x20000034
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40021000 	.word	0x40021000

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	2230      	movs	r2, #48	; 0x30
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f002 f9b8 	bl	8002ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SystemClock_Config+0xcc>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <SystemClock_Config+0xcc>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <SystemClock_Config+0xcc>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <SystemClock_Config+0xd0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <SystemClock_Config+0xd0>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <SystemClock_Config+0xd0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d0:	2308      	movs	r3, #8
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009de:	2307      	movs	r3, #7
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fe7a 	bl	80016e0 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009f2:	f000 f9df 	bl	8000db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
 80009f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2302      	movs	r3, #2
 80009fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	2105      	movs	r1, #5
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 f8d3 	bl	8001bc0 <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a20:	f000 f9c8 	bl	8000db4 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3750      	adds	r7, #80	; 0x50
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <MX_SPI2_Init+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a80:	220a      	movs	r2, #10
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_SPI2_Init+0x64>)
 8000a86:	f001 fa8d 	bl	8001fa4 <HAL_SPI_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a90:	f000 f990 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000034 	.word	0x20000034
 8000a9c:	40003800 	.word	0x40003800

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f001 fd16 	bl	8002508 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f967 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000008c 	.word	0x2000008c
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	4ba2      	ldr	r3, [pc, #648]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4aa1      	ldr	r2, [pc, #644]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b9f      	ldr	r3, [pc, #636]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	4b9b      	ldr	r3, [pc, #620]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a9a      	ldr	r2, [pc, #616]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b98      	ldr	r3, [pc, #608]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b94      	ldr	r3, [pc, #592]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a93      	ldr	r2, [pc, #588]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b91      	ldr	r3, [pc, #580]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b8d      	ldr	r3, [pc, #564]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a8c      	ldr	r2, [pc, #560]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b8a      	ldr	r3, [pc, #552]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b86      	ldr	r3, [pc, #536]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a85      	ldr	r2, [pc, #532]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b83      	ldr	r3, [pc, #524]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b7f      	ldr	r3, [pc, #508]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a7e      	ldr	r2, [pc, #504]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b7c      	ldr	r3, [pc, #496]	; (8000d98 <MX_GPIO_Init+0x2a4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f64c 4108 	movw	r1, #52232	; 0xcc08
 8000bb8:	4878      	ldr	r0, [pc, #480]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000bba:	f000 fd5d 	bl	8001678 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4877      	ldr	r0, [pc, #476]	; (8000da0 <MX_GPIO_Init+0x2ac>)
 8000bc4:	f000 fd58 	bl	8001678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bce:	4875      	ldr	r0, [pc, #468]	; (8000da4 <MX_GPIO_Init+0x2b0>)
 8000bd0:	f000 fd52 	bl	8001678 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE10 PE11 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000bd4:	f64c 4308 	movw	r3, #52232	; 0xcc08
 8000bd8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	486b      	ldr	r0, [pc, #428]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000bee:	f000 fba9 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4865      	ldr	r0, [pc, #404]	; (8000da0 <MX_GPIO_Init+0x2ac>)
 8000c0a:	f000 fb9b 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	485d      	ldr	r0, [pc, #372]	; (8000da0 <MX_GPIO_Init+0x2ac>)
 8000c2a:	f000 fb8b 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c32:	4b5d      	ldr	r3, [pc, #372]	; (8000da8 <MX_GPIO_Init+0x2b4>)
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	485a      	ldr	r0, [pc, #360]	; (8000dac <MX_GPIO_Init+0x2b8>)
 8000c42:	f000 fb7f 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c46:	2310      	movs	r3, #16
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c56:	2306      	movs	r3, #6
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4852      	ldr	r0, [pc, #328]	; (8000dac <MX_GPIO_Init+0x2b8>)
 8000c62:	f000 fb6f 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c66:	23e0      	movs	r3, #224	; 0xe0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c76:	2305      	movs	r3, #5
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	484a      	ldr	r0, [pc, #296]	; (8000dac <MX_GPIO_Init+0x2b8>)
 8000c82:	f000 fb5f 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c86:	2304      	movs	r3, #4
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4845      	ldr	r0, [pc, #276]	; (8000db0 <MX_GPIO_Init+0x2bc>)
 8000c9a:	f000 fb53 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	483d      	ldr	r0, [pc, #244]	; (8000db0 <MX_GPIO_Init+0x2bc>)
 8000cbc:	f000 fb42 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000cc0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cc4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4832      	ldr	r0, [pc, #200]	; (8000da4 <MX_GPIO_Init+0x2b0>)
 8000cda:	f000 fb33 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000cde:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf0:	2306      	movs	r3, #6
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4829      	ldr	r0, [pc, #164]	; (8000da0 <MX_GPIO_Init+0x2ac>)
 8000cfc:	f000 fb22 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4825      	ldr	r0, [pc, #148]	; (8000dac <MX_GPIO_Init+0x2b8>)
 8000d16:	f000 fb15 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	481d      	ldr	r0, [pc, #116]	; (8000dac <MX_GPIO_Init+0x2b8>)
 8000d38:	f000 fb04 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4815      	ldr	r0, [pc, #84]	; (8000da4 <MX_GPIO_Init+0x2b0>)
 8000d50:	f000 faf8 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d54:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d66:	2304      	movs	r3, #4
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <MX_GPIO_Init+0x2bc>)
 8000d72:	f000 fae7 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_GPIO_Init+0x2b4>)
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_GPIO_Init+0x2a8>)
 8000d8a:	f000 fadb 	bl	8001344 <HAL_GPIO_Init>

}
 8000d8e:	bf00      	nop
 8000d90:	3730      	adds	r7, #48	; 0x30
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020c00 	.word	0x40020c00
 8000da8:	10110000 	.word	0x10110000
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020400 	.word	0x40020400

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e02:	2007      	movs	r0, #7
 8000e04:	f000 fa6a 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <HAL_SPI_MspInit+0xc0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d14a      	bne.n	8000ecc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_SPI_MspInit+0xc4>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <HAL_SPI_MspInit+0xc4>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <HAL_SPI_MspInit+0xc4>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <HAL_SPI_MspInit+0xc4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <HAL_SPI_MspInit+0xc4>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_SPI_MspInit+0xc4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_SPI_MspInit+0xc4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_SPI_MspInit+0xc4>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_SPI_MspInit+0xc4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <HAL_SPI_MspInit+0xc8>)
 8000ea6:	f000 fa4d 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000eaa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ebc:	2305      	movs	r3, #5
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_SPI_MspInit+0xcc>)
 8000ec8:	f000 fa3c 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40003800 	.word	0x40003800
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x84>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12b      	bne.n	8000f5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_UART_MspInit+0x8c>)
 8000f5a:	f000 f9f3 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f894 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <SystemInit+0x28>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <SystemInit+0x28>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SystemInit+0x28>)
 8000fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fea:	609a      	str	r2, [r3, #8]
#endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x14>
 8001000:	2100      	movs	r1, #0
 8001002:	e003      	b.n	800100c <LoopCopyDataInit>

08001004 <CopyDataInit>:
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <LoopFillZerobss+0x18>)
 8001006:	585b      	ldr	r3, [r3, r1]
 8001008:	5043      	str	r3, [r0, r1]
 800100a:	3104      	adds	r1, #4

0800100c <LoopCopyDataInit>:
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <LoopFillZerobss+0x1c>)
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <LoopFillZerobss+0x20>)
 8001010:	1842      	adds	r2, r0, r1
 8001012:	429a      	cmp	r2, r3
 8001014:	d3f6      	bcc.n	8001004 <CopyDataInit>
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x24>)
 8001018:	e002      	b.n	8001020 <LoopFillZerobss>

0800101a <FillZerobss>:
 800101a:	2300      	movs	r3, #0
 800101c:	f842 3b04 	str.w	r3, [r2], #4

08001020 <LoopFillZerobss>:
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <LoopFillZerobss+0x28>)
 8001022:	429a      	cmp	r2, r3
 8001024:	d3f9      	bcc.n	800101a <FillZerobss>
 8001026:	f7ff ffd3 	bl	8000fd0 <SystemInit>
 800102a:	f001 fe37 	bl	8002c9c <__libc_init_array>
 800102e:	f7ff fc5f 	bl	80008f0 <main>
 8001032:	4770      	bx	lr
 8001034:	20020000 	.word	0x20020000
 8001038:	08002d34 	.word	0x08002d34
 800103c:	20000000 	.word	0x20000000
 8001040:	20000018 	.word	0x20000018
 8001044:	20000018 	.word	0x20000018
 8001048:	200000d0 	.word	0x200000d0

0800104c <ADC_IRQHandler>:
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f92f 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fe9e 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f939 	bl	800132a <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d0:	f000 f90f 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	20000014 	.word	0x20000014
 80010f0:	20000010 	.word	0x20000010

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000014 	.word	0x20000014
 8001118:	200000cc 	.word	0x200000cc

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200000cc 	.word	0x200000cc

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_Delay+0x40>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000014 	.word	0x20000014

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff47 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff5c 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffb0 	bl	8001298 <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e16b      	b.n	8001638 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 815a 	bne.w	8001632 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d00b      	beq.n	800139e <HAL_GPIO_Init+0x5a>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001392:	2b11      	cmp	r3, #17
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b12      	cmp	r3, #18
 800139c:	d130      	bne.n	8001400 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 0201 	and.w	r2, r3, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0xfc>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b12      	cmp	r3, #18
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80b4 	beq.w	8001632 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b5f      	ldr	r3, [pc, #380]	; (800164c <HAL_GPIO_Init+0x308>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a5e      	ldr	r2, [pc, #376]	; (800164c <HAL_GPIO_Init+0x308>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <HAL_GPIO_Init+0x308>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e6:	4a5a      	ldr	r2, [pc, #360]	; (8001650 <HAL_GPIO_Init+0x30c>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a51      	ldr	r2, [pc, #324]	; (8001654 <HAL_GPIO_Init+0x310>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d02b      	beq.n	800156a <HAL_GPIO_Init+0x226>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a50      	ldr	r2, [pc, #320]	; (8001658 <HAL_GPIO_Init+0x314>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d025      	beq.n	8001566 <HAL_GPIO_Init+0x222>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4f      	ldr	r2, [pc, #316]	; (800165c <HAL_GPIO_Init+0x318>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d01f      	beq.n	8001562 <HAL_GPIO_Init+0x21e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4e      	ldr	r2, [pc, #312]	; (8001660 <HAL_GPIO_Init+0x31c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d019      	beq.n	800155e <HAL_GPIO_Init+0x21a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4d      	ldr	r2, [pc, #308]	; (8001664 <HAL_GPIO_Init+0x320>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x216>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <HAL_GPIO_Init+0x324>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x212>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4b      	ldr	r2, [pc, #300]	; (800166c <HAL_GPIO_Init+0x328>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x20e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4a      	ldr	r2, [pc, #296]	; (8001670 <HAL_GPIO_Init+0x32c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x20a>
 800154a:	2307      	movs	r3, #7
 800154c:	e00e      	b.n	800156c <HAL_GPIO_Init+0x228>
 800154e:	2308      	movs	r3, #8
 8001550:	e00c      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001552:	2306      	movs	r3, #6
 8001554:	e00a      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001556:	2305      	movs	r3, #5
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x228>
 800155a:	2304      	movs	r3, #4
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x228>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x228>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157c:	4934      	ldr	r1, [pc, #208]	; (8001650 <HAL_GPIO_Init+0x30c>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158a:	4b3a      	ldr	r3, [pc, #232]	; (8001674 <HAL_GPIO_Init+0x330>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ae:	4a31      	ldr	r2, [pc, #196]	; (8001674 <HAL_GPIO_Init+0x330>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015b4:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_GPIO_Init+0x330>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d8:	4a26      	ldr	r2, [pc, #152]	; (8001674 <HAL_GPIO_Init+0x330>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <HAL_GPIO_Init+0x330>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_GPIO_Init+0x330>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_GPIO_Init+0x330>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_GPIO_Init+0x330>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f ae90 	bls.w	8001360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	3724      	adds	r7, #36	; 0x24
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40023800 	.word	0x40023800
 8001650:	40013800 	.word	0x40013800
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	40020800 	.word	0x40020800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40021400 	.word	0x40021400
 800166c:	40021800 	.word	0x40021800
 8001670:	40021c00 	.word	0x40021c00
 8001674:	40013c00 	.word	0x40013c00

08001678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001688:	787b      	ldrb	r3, [r7, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001694:	e003      	b.n	800169e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	619a      	str	r2, [r3, #24]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	460b      	mov	r3, r1
 80016b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	401a      	ands	r2, r3
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d104      	bne.n	80016ce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	041a      	lsls	r2, r3, #16
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e25b      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d075      	beq.n	80017ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016fe:	4ba3      	ldr	r3, [pc, #652]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b04      	cmp	r3, #4
 8001708:	d00c      	beq.n	8001724 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170a:	4ba0      	ldr	r3, [pc, #640]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001712:	2b08      	cmp	r3, #8
 8001714:	d112      	bne.n	800173c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001716:	4b9d      	ldr	r3, [pc, #628]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001722:	d10b      	bne.n	800173c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	4b99      	ldr	r3, [pc, #612]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d05b      	beq.n	80017e8 <HAL_RCC_OscConfig+0x108>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d157      	bne.n	80017e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e236      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001744:	d106      	bne.n	8001754 <HAL_RCC_OscConfig+0x74>
 8001746:	4b91      	ldr	r3, [pc, #580]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a90      	ldr	r2, [pc, #576]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e01d      	b.n	8001790 <HAL_RCC_OscConfig+0xb0>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x98>
 800175e:	4b8b      	ldr	r3, [pc, #556]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a8a      	ldr	r2, [pc, #552]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b88      	ldr	r3, [pc, #544]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a87      	ldr	r2, [pc, #540]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e00b      	b.n	8001790 <HAL_RCC_OscConfig+0xb0>
 8001778:	4b84      	ldr	r3, [pc, #528]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a83      	ldr	r2, [pc, #524]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 800177e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b81      	ldr	r3, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a80      	ldr	r2, [pc, #512]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fcc0 	bl	800111c <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fcbc 	bl	800111c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1fb      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b76      	ldr	r3, [pc, #472]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0xc0>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fcac 	bl	800111c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fca8 	bl	800111c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1e7      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	4b6c      	ldr	r3, [pc, #432]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0xe8>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d063      	beq.n	80018be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017f6:	4b65      	ldr	r3, [pc, #404]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001802:	4b62      	ldr	r3, [pc, #392]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800180a:	2b08      	cmp	r3, #8
 800180c:	d11c      	bne.n	8001848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_RCC_OscConfig+0x152>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1bb      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b56      	ldr	r3, [pc, #344]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4952      	ldr	r1, [pc, #328]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	e03a      	b.n	80018be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001850:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <HAL_RCC_OscConfig+0x2b0>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff fc61 	bl	800111c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff fc5d 	bl	800111c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e19c      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	4b46      	ldr	r3, [pc, #280]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b43      	ldr	r3, [pc, #268]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4940      	ldr	r1, [pc, #256]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_OscConfig+0x2b0>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fc40 	bl	800111c <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff fc3c 	bl	800111c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e17b      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	4b36      	ldr	r3, [pc, #216]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d030      	beq.n	800192c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d016      	beq.n	8001900 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d2:	4b30      	ldr	r3, [pc, #192]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fc20 	bl	800111c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff fc1c 	bl	800111c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e15b      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x200>
 80018fe:	e015      	b.n	800192c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001906:	f7ff fc09 	bl	800111c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff fc05 	bl	800111c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e144      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a0 	beq.w	8001a7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10f      	bne.n	800196a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a0e      	ldr	r2, [pc, #56]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_RCC_OscConfig+0x2ac>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001966:	2301      	movs	r3, #1
 8001968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_OscConfig+0x2b8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d121      	bne.n	80019ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_RCC_OscConfig+0x2b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_RCC_OscConfig+0x2b8>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001982:	f7ff fbcb 	bl	800111c <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	e011      	b.n	80019ae <HAL_RCC_OscConfig+0x2ce>
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	42470000 	.word	0x42470000
 8001994:	42470e80 	.word	0x42470e80
 8001998:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199c:	f7ff fbbe 	bl	800111c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e0fd      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ae:	4b81      	ldr	r3, [pc, #516]	; (8001bb4 <HAL_RCC_OscConfig+0x4d4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d106      	bne.n	80019d0 <HAL_RCC_OscConfig+0x2f0>
 80019c2:	4b7d      	ldr	r3, [pc, #500]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c6:	4a7c      	ldr	r2, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6713      	str	r3, [r2, #112]	; 0x70
 80019ce:	e01c      	b.n	8001a0a <HAL_RCC_OscConfig+0x32a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d10c      	bne.n	80019f2 <HAL_RCC_OscConfig+0x312>
 80019d8:	4b77      	ldr	r3, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	4a76      	ldr	r2, [pc, #472]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	6713      	str	r3, [r2, #112]	; 0x70
 80019e4:	4b74      	ldr	r3, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	4a73      	ldr	r2, [pc, #460]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6713      	str	r3, [r2, #112]	; 0x70
 80019f0:	e00b      	b.n	8001a0a <HAL_RCC_OscConfig+0x32a>
 80019f2:	4b71      	ldr	r3, [pc, #452]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	4a70      	ldr	r2, [pc, #448]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6713      	str	r3, [r2, #112]	; 0x70
 80019fe:	4b6e      	ldr	r3, [pc, #440]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a6d      	ldr	r2, [pc, #436]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d015      	beq.n	8001a3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff fb83 	bl	800111c <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff fb7f 	bl	800111c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0bc      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ee      	beq.n	8001a1a <HAL_RCC_OscConfig+0x33a>
 8001a3c:	e014      	b.n	8001a68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fb6d 	bl	800111c <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7ff fb69 	bl	800111c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0a6      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5c:	4b56      	ldr	r3, [pc, #344]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ee      	bne.n	8001a46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d105      	bne.n	8001a7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6e:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a51      	ldr	r2, [pc, #324]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8092 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a84:	4b4c      	ldr	r3, [pc, #304]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d05c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d141      	bne.n	8001b1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a98:	4b48      	ldr	r3, [pc, #288]	; (8001bbc <HAL_RCC_OscConfig+0x4dc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fb3d 	bl	800111c <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7ff fb39 	bl	800111c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e078      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab8:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69da      	ldr	r2, [r3, #28]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	019b      	lsls	r3, r3, #6
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	3b01      	subs	r3, #1
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	061b      	lsls	r3, r3, #24
 8001ae8:	4933      	ldr	r1, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aee:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <HAL_RCC_OscConfig+0x4dc>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fb12 	bl	800111c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff fb0e 	bl	800111c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e04d      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x41c>
 8001b1a:	e045      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x4dc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff fafb 	bl	800111c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff faf7 	bl	800111c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e036      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x44a>
 8001b48:	e02e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e029      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_RCC_OscConfig+0x4d8>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d115      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b7e:	4013      	ands	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d10d      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d106      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	42470060 	.word	0x42470060

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0cc      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d90c      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d044      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d119      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e067      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4934      	ldr	r1, [pc, #208]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff fa34 	bl	800111c <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff fa30 	bl	800111c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e04f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d20c      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f994 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08002d0c 	.word	0x08002d0c
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	20000010 	.word	0x20000010

08001d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d007      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0x32>
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d008      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x38>
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 80b4 	bne.w	8001f20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db8:	4b5e      	ldr	r3, [pc, #376]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001dba:	60bb      	str	r3, [r7, #8]
       break;
 8001dbc:	e0b3      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dbe:	4b5e      	ldr	r3, [pc, #376]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001dc0:	60bb      	str	r3, [r7, #8]
      break;
 8001dc2:	e0b0      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc4:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dce:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d04a      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dda:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	099b      	lsrs	r3, r3, #6
 8001de0:	f04f 0400 	mov.w	r4, #0
 8001de4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	ea03 0501 	and.w	r5, r3, r1
 8001df0:	ea04 0602 	and.w	r6, r4, r2
 8001df4:	4629      	mov	r1, r5
 8001df6:	4632      	mov	r2, r6
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	f04f 0400 	mov.w	r4, #0
 8001e00:	0154      	lsls	r4, r2, #5
 8001e02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e06:	014b      	lsls	r3, r1, #5
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4622      	mov	r2, r4
 8001e0c:	1b49      	subs	r1, r1, r5
 8001e0e:	eb62 0206 	sbc.w	r2, r2, r6
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	f04f 0400 	mov.w	r4, #0
 8001e1a:	0194      	lsls	r4, r2, #6
 8001e1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e20:	018b      	lsls	r3, r1, #6
 8001e22:	1a5b      	subs	r3, r3, r1
 8001e24:	eb64 0402 	sbc.w	r4, r4, r2
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	00e2      	lsls	r2, r4, #3
 8001e32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e36:	00d9      	lsls	r1, r3, #3
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4614      	mov	r4, r2
 8001e3c:	195b      	adds	r3, r3, r5
 8001e3e:	eb44 0406 	adc.w	r4, r4, r6
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	0262      	lsls	r2, r4, #9
 8001e4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e50:	0259      	lsls	r1, r3, #9
 8001e52:	460b      	mov	r3, r1
 8001e54:	4614      	mov	r4, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	4621      	mov	r1, r4
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f04f 0400 	mov.w	r4, #0
 8001e60:	461a      	mov	r2, r3
 8001e62:	4623      	mov	r3, r4
 8001e64:	f7fe f9b0 	bl	80001c8 <__aeabi_uldivmod>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	e049      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	099b      	lsrs	r3, r3, #6
 8001e76:	f04f 0400 	mov.w	r4, #0
 8001e7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	ea03 0501 	and.w	r5, r3, r1
 8001e86:	ea04 0602 	and.w	r6, r4, r2
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	4632      	mov	r2, r6
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	f04f 0400 	mov.w	r4, #0
 8001e96:	0154      	lsls	r4, r2, #5
 8001e98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e9c:	014b      	lsls	r3, r1, #5
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4622      	mov	r2, r4
 8001ea2:	1b49      	subs	r1, r1, r5
 8001ea4:	eb62 0206 	sbc.w	r2, r2, r6
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	f04f 0400 	mov.w	r4, #0
 8001eb0:	0194      	lsls	r4, r2, #6
 8001eb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001eb6:	018b      	lsls	r3, r1, #6
 8001eb8:	1a5b      	subs	r3, r3, r1
 8001eba:	eb64 0402 	sbc.w	r4, r4, r2
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	00e2      	lsls	r2, r4, #3
 8001ec8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ecc:	00d9      	lsls	r1, r3, #3
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4614      	mov	r4, r2
 8001ed2:	195b      	adds	r3, r3, r5
 8001ed4:	eb44 0406 	adc.w	r4, r4, r6
 8001ed8:	f04f 0100 	mov.w	r1, #0
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	02a2      	lsls	r2, r4, #10
 8001ee2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ee6:	0299      	lsls	r1, r3, #10
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4614      	mov	r4, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	4621      	mov	r1, r4
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f04f 0400 	mov.w	r4, #0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4623      	mov	r3, r4
 8001efa:	f7fe f965 	bl	80001c8 <__aeabi_uldivmod>
 8001efe:	4603      	mov	r3, r0
 8001f00:	460c      	mov	r4, r1
 8001f02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	60bb      	str	r3, [r7, #8]
      break;
 8001f1e:	e002      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f22:	60bb      	str	r3, [r7, #8]
      break;
 8001f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f26:	68bb      	ldr	r3, [r7, #8]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	00f42400 	.word	0x00f42400
 8001f38:	007a1200 	.word	0x007a1200

08001f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f58:	f7ff fff0 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	0a9b      	lsrs	r3, r3, #10
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	08002d1c 	.word	0x08002d1c

08001f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f80:	f7ff ffdc 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f84:	4601      	mov	r1, r0
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0b5b      	lsrs	r3, r3, #13
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	08002d1c 	.word	0x08002d1c

08001fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e056      	b.n	8002064 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7fe ff1f 	bl	8000e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	ea42 0103 	orr.w	r1, r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	0c1b      	lsrs	r3, r3, #16
 8002034:	f003 0104 	and.w	r1, r3, #4
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002052:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800207a:	2301      	movs	r3, #1
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_SPI_TransmitReceive+0x26>
 800208e:	2302      	movs	r3, #2
 8002090:	e18a      	b.n	80023a8 <HAL_SPI_TransmitReceive+0x33c>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800209a:	f7ff f83f 	bl	800111c <HAL_GetTick>
 800209e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d00f      	beq.n	80020dc <HAL_SPI_TransmitReceive+0x70>
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020c2:	d107      	bne.n	80020d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <HAL_SPI_TransmitReceive+0x68>
 80020cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d003      	beq.n	80020dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
 80020d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020da:	e15b      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_SPI_TransmitReceive+0x82>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_SPI_TransmitReceive+0x82>
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020f4:	e14e      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d003      	beq.n	800210a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2205      	movs	r2, #5
 8002106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	887a      	ldrh	r2, [r7, #2]
 800211a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	887a      	ldrh	r2, [r7, #2]
 8002132:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d007      	beq.n	800215e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002166:	d178      	bne.n	800225a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x10a>
 8002170:	8b7b      	ldrh	r3, [r7, #26]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d166      	bne.n	8002244 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	1c9a      	adds	r2, r3, #2
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800219a:	e053      	b.n	8002244 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d11b      	bne.n	80021e2 <HAL_SPI_TransmitReceive+0x176>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d016      	beq.n	80021e2 <HAL_SPI_TransmitReceive+0x176>
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d113      	bne.n	80021e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	881a      	ldrh	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	1c9a      	adds	r2, r3, #2
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d119      	bne.n	8002224 <HAL_SPI_TransmitReceive+0x1b8>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d014      	beq.n	8002224 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	b292      	uxth	r2, r2
 8002206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	1c9a      	adds	r2, r3, #2
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002220:	2301      	movs	r3, #1
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002224:	f7fe ff7a 	bl	800111c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002230:	429a      	cmp	r2, r3
 8002232:	d807      	bhi.n	8002244 <HAL_SPI_TransmitReceive+0x1d8>
 8002234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800223a:	d003      	beq.n	8002244 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002242:	e0a7      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1a6      	bne.n	800219c <HAL_SPI_TransmitReceive+0x130>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1a1      	bne.n	800219c <HAL_SPI_TransmitReceive+0x130>
 8002258:	e07c      	b.n	8002354 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x1fc>
 8002262:	8b7b      	ldrh	r3, [r7, #26]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d16b      	bne.n	8002340 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	330c      	adds	r3, #12
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800228e:	e057      	b.n	8002340 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d11c      	bne.n	80022d8 <HAL_SPI_TransmitReceive+0x26c>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x26c>
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d114      	bne.n	80022d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	330c      	adds	r3, #12
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d119      	bne.n	800231a <HAL_SPI_TransmitReceive+0x2ae>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d014      	beq.n	800231a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002316:	2301      	movs	r3, #1
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800231a:	f7fe feff 	bl	800111c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002326:	429a      	cmp	r2, r3
 8002328:	d803      	bhi.n	8002332 <HAL_SPI_TransmitReceive+0x2c6>
 800232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002330:	d102      	bne.n	8002338 <HAL_SPI_TransmitReceive+0x2cc>
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800233e:	e029      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1a2      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x224>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d19d      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f893 	bl	8002484 <SPI_EndRxTxTransaction>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002370:	e010      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	e000      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002392:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3730      	adds	r7, #48	; 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023c0:	e04c      	b.n	800245c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023c8:	d048      	beq.n	800245c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80023ca:	f7fe fea7 	bl	800111c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d902      	bls.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d13d      	bne.n	800245c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023f8:	d111      	bne.n	800241e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002402:	d004      	beq.n	800240e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240c:	d107      	bne.n	800241e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002426:	d10f      	bne.n	8002448 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002446:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e00f      	b.n	800247c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	4013      	ands	r3, r2
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	429a      	cmp	r2, r3
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	429a      	cmp	r2, r3
 8002478:	d1a3      	bne.n	80023c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <SPI_EndRxTxTransaction+0x7c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <SPI_EndRxTxTransaction+0x80>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0d5b      	lsrs	r3, r3, #21
 800249c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024a0:	fb02 f303 	mul.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ae:	d112      	bne.n	80024d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7ff ff78 	bl	80023b0 <SPI_WaitFlagStateUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 0220 	orr.w	r2, r3, #32
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e00f      	b.n	80024f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3b01      	subs	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d0f2      	beq.n	80024d6 <SPI_EndRxTxTransaction+0x52>
 80024f0:	e000      	b.n	80024f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80024f2:	bf00      	nop
  }

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000000c 	.word	0x2000000c
 8002504:	165e9f81 	.word	0x165e9f81

08002508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e03f      	b.n	800259a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fcd8 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	; 0x24
 8002538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f829 	bl	80025a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025e6:	f023 030c 	bic.w	r3, r3, #12
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	68f9      	ldr	r1, [r7, #12]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002612:	f040 818b 	bne.w	800292c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4ac1      	ldr	r2, [pc, #772]	; (8002920 <UART_SetConfig+0x37c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d005      	beq.n	800262c <UART_SetConfig+0x88>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4abf      	ldr	r2, [pc, #764]	; (8002924 <UART_SetConfig+0x380>)
 8002626:	4293      	cmp	r3, r2
 8002628:	f040 80bd 	bne.w	80027a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800262c:	f7ff fca6 	bl	8001f7c <HAL_RCC_GetPCLK2Freq>
 8002630:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	461d      	mov	r5, r3
 8002636:	f04f 0600 	mov.w	r6, #0
 800263a:	46a8      	mov	r8, r5
 800263c:	46b1      	mov	r9, r6
 800263e:	eb18 0308 	adds.w	r3, r8, r8
 8002642:	eb49 0409 	adc.w	r4, r9, r9
 8002646:	4698      	mov	r8, r3
 8002648:	46a1      	mov	r9, r4
 800264a:	eb18 0805 	adds.w	r8, r8, r5
 800264e:	eb49 0906 	adc.w	r9, r9, r6
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800265e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002662:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002666:	4688      	mov	r8, r1
 8002668:	4691      	mov	r9, r2
 800266a:	eb18 0005 	adds.w	r0, r8, r5
 800266e:	eb49 0106 	adc.w	r1, r9, r6
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	461d      	mov	r5, r3
 8002678:	f04f 0600 	mov.w	r6, #0
 800267c:	196b      	adds	r3, r5, r5
 800267e:	eb46 0406 	adc.w	r4, r6, r6
 8002682:	461a      	mov	r2, r3
 8002684:	4623      	mov	r3, r4
 8002686:	f7fd fd9f 	bl	80001c8 <__aeabi_uldivmod>
 800268a:	4603      	mov	r3, r0
 800268c:	460c      	mov	r4, r1
 800268e:	461a      	mov	r2, r3
 8002690:	4ba5      	ldr	r3, [pc, #660]	; (8002928 <UART_SetConfig+0x384>)
 8002692:	fba3 2302 	umull	r2, r3, r3, r2
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	461d      	mov	r5, r3
 80026a0:	f04f 0600 	mov.w	r6, #0
 80026a4:	46a9      	mov	r9, r5
 80026a6:	46b2      	mov	sl, r6
 80026a8:	eb19 0309 	adds.w	r3, r9, r9
 80026ac:	eb4a 040a 	adc.w	r4, sl, sl
 80026b0:	4699      	mov	r9, r3
 80026b2:	46a2      	mov	sl, r4
 80026b4:	eb19 0905 	adds.w	r9, r9, r5
 80026b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80026bc:	f04f 0100 	mov.w	r1, #0
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026d0:	4689      	mov	r9, r1
 80026d2:	4692      	mov	sl, r2
 80026d4:	eb19 0005 	adds.w	r0, r9, r5
 80026d8:	eb4a 0106 	adc.w	r1, sl, r6
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	461d      	mov	r5, r3
 80026e2:	f04f 0600 	mov.w	r6, #0
 80026e6:	196b      	adds	r3, r5, r5
 80026e8:	eb46 0406 	adc.w	r4, r6, r6
 80026ec:	461a      	mov	r2, r3
 80026ee:	4623      	mov	r3, r4
 80026f0:	f7fd fd6a 	bl	80001c8 <__aeabi_uldivmod>
 80026f4:	4603      	mov	r3, r0
 80026f6:	460c      	mov	r4, r1
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b8b      	ldr	r3, [pc, #556]	; (8002928 <UART_SetConfig+0x384>)
 80026fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	2164      	movs	r1, #100	; 0x64
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	3332      	adds	r3, #50	; 0x32
 800270e:	4a86      	ldr	r2, [pc, #536]	; (8002928 <UART_SetConfig+0x384>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800271c:	4498      	add	r8, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	461d      	mov	r5, r3
 8002722:	f04f 0600 	mov.w	r6, #0
 8002726:	46a9      	mov	r9, r5
 8002728:	46b2      	mov	sl, r6
 800272a:	eb19 0309 	adds.w	r3, r9, r9
 800272e:	eb4a 040a 	adc.w	r4, sl, sl
 8002732:	4699      	mov	r9, r3
 8002734:	46a2      	mov	sl, r4
 8002736:	eb19 0905 	adds.w	r9, r9, r5
 800273a:	eb4a 0a06 	adc.w	sl, sl, r6
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800274a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800274e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002752:	4689      	mov	r9, r1
 8002754:	4692      	mov	sl, r2
 8002756:	eb19 0005 	adds.w	r0, r9, r5
 800275a:	eb4a 0106 	adc.w	r1, sl, r6
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	461d      	mov	r5, r3
 8002764:	f04f 0600 	mov.w	r6, #0
 8002768:	196b      	adds	r3, r5, r5
 800276a:	eb46 0406 	adc.w	r4, r6, r6
 800276e:	461a      	mov	r2, r3
 8002770:	4623      	mov	r3, r4
 8002772:	f7fd fd29 	bl	80001c8 <__aeabi_uldivmod>
 8002776:	4603      	mov	r3, r0
 8002778:	460c      	mov	r4, r1
 800277a:	461a      	mov	r2, r3
 800277c:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <UART_SetConfig+0x384>)
 800277e:	fba3 1302 	umull	r1, r3, r3, r2
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2164      	movs	r1, #100	; 0x64
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	3332      	adds	r3, #50	; 0x32
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <UART_SetConfig+0x384>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	f003 0207 	and.w	r2, r3, #7
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4442      	add	r2, r8
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e26f      	b.n	8002c86 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027a6:	f7ff fbd5 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 80027aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	461d      	mov	r5, r3
 80027b0:	f04f 0600 	mov.w	r6, #0
 80027b4:	46a8      	mov	r8, r5
 80027b6:	46b1      	mov	r9, r6
 80027b8:	eb18 0308 	adds.w	r3, r8, r8
 80027bc:	eb49 0409 	adc.w	r4, r9, r9
 80027c0:	4698      	mov	r8, r3
 80027c2:	46a1      	mov	r9, r4
 80027c4:	eb18 0805 	adds.w	r8, r8, r5
 80027c8:	eb49 0906 	adc.w	r9, r9, r6
 80027cc:	f04f 0100 	mov.w	r1, #0
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027e0:	4688      	mov	r8, r1
 80027e2:	4691      	mov	r9, r2
 80027e4:	eb18 0005 	adds.w	r0, r8, r5
 80027e8:	eb49 0106 	adc.w	r1, r9, r6
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	461d      	mov	r5, r3
 80027f2:	f04f 0600 	mov.w	r6, #0
 80027f6:	196b      	adds	r3, r5, r5
 80027f8:	eb46 0406 	adc.w	r4, r6, r6
 80027fc:	461a      	mov	r2, r3
 80027fe:	4623      	mov	r3, r4
 8002800:	f7fd fce2 	bl	80001c8 <__aeabi_uldivmod>
 8002804:	4603      	mov	r3, r0
 8002806:	460c      	mov	r4, r1
 8002808:	461a      	mov	r2, r3
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <UART_SetConfig+0x384>)
 800280c:	fba3 2302 	umull	r2, r3, r3, r2
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	461d      	mov	r5, r3
 800281a:	f04f 0600 	mov.w	r6, #0
 800281e:	46a9      	mov	r9, r5
 8002820:	46b2      	mov	sl, r6
 8002822:	eb19 0309 	adds.w	r3, r9, r9
 8002826:	eb4a 040a 	adc.w	r4, sl, sl
 800282a:	4699      	mov	r9, r3
 800282c:	46a2      	mov	sl, r4
 800282e:	eb19 0905 	adds.w	r9, r9, r5
 8002832:	eb4a 0a06 	adc.w	sl, sl, r6
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002842:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002846:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800284a:	4689      	mov	r9, r1
 800284c:	4692      	mov	sl, r2
 800284e:	eb19 0005 	adds.w	r0, r9, r5
 8002852:	eb4a 0106 	adc.w	r1, sl, r6
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	461d      	mov	r5, r3
 800285c:	f04f 0600 	mov.w	r6, #0
 8002860:	196b      	adds	r3, r5, r5
 8002862:	eb46 0406 	adc.w	r4, r6, r6
 8002866:	461a      	mov	r2, r3
 8002868:	4623      	mov	r3, r4
 800286a:	f7fd fcad 	bl	80001c8 <__aeabi_uldivmod>
 800286e:	4603      	mov	r3, r0
 8002870:	460c      	mov	r4, r1
 8002872:	461a      	mov	r2, r3
 8002874:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <UART_SetConfig+0x384>)
 8002876:	fba3 1302 	umull	r1, r3, r3, r2
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2164      	movs	r1, #100	; 0x64
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	3332      	adds	r3, #50	; 0x32
 8002888:	4a27      	ldr	r2, [pc, #156]	; (8002928 <UART_SetConfig+0x384>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002896:	4498      	add	r8, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	461d      	mov	r5, r3
 800289c:	f04f 0600 	mov.w	r6, #0
 80028a0:	46a9      	mov	r9, r5
 80028a2:	46b2      	mov	sl, r6
 80028a4:	eb19 0309 	adds.w	r3, r9, r9
 80028a8:	eb4a 040a 	adc.w	r4, sl, sl
 80028ac:	4699      	mov	r9, r3
 80028ae:	46a2      	mov	sl, r4
 80028b0:	eb19 0905 	adds.w	r9, r9, r5
 80028b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80028b8:	f04f 0100 	mov.w	r1, #0
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028cc:	4689      	mov	r9, r1
 80028ce:	4692      	mov	sl, r2
 80028d0:	eb19 0005 	adds.w	r0, r9, r5
 80028d4:	eb4a 0106 	adc.w	r1, sl, r6
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	461d      	mov	r5, r3
 80028de:	f04f 0600 	mov.w	r6, #0
 80028e2:	196b      	adds	r3, r5, r5
 80028e4:	eb46 0406 	adc.w	r4, r6, r6
 80028e8:	461a      	mov	r2, r3
 80028ea:	4623      	mov	r3, r4
 80028ec:	f7fd fc6c 	bl	80001c8 <__aeabi_uldivmod>
 80028f0:	4603      	mov	r3, r0
 80028f2:	460c      	mov	r4, r1
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <UART_SetConfig+0x384>)
 80028f8:	fba3 1302 	umull	r1, r3, r3, r2
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	2164      	movs	r1, #100	; 0x64
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	3332      	adds	r3, #50	; 0x32
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <UART_SetConfig+0x384>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	f003 0207 	and.w	r2, r3, #7
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4442      	add	r2, r8
 800291c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800291e:	e1b2      	b.n	8002c86 <UART_SetConfig+0x6e2>
 8002920:	40011000 	.word	0x40011000
 8002924:	40011400 	.word	0x40011400
 8002928:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4ad7      	ldr	r2, [pc, #860]	; (8002c90 <UART_SetConfig+0x6ec>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d005      	beq.n	8002942 <UART_SetConfig+0x39e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4ad6      	ldr	r2, [pc, #856]	; (8002c94 <UART_SetConfig+0x6f0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	f040 80d1 	bne.w	8002ae4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002942:	f7ff fb1b 	bl	8001f7c <HAL_RCC_GetPCLK2Freq>
 8002946:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	469a      	mov	sl, r3
 800294c:	f04f 0b00 	mov.w	fp, #0
 8002950:	46d0      	mov	r8, sl
 8002952:	46d9      	mov	r9, fp
 8002954:	eb18 0308 	adds.w	r3, r8, r8
 8002958:	eb49 0409 	adc.w	r4, r9, r9
 800295c:	4698      	mov	r8, r3
 800295e:	46a1      	mov	r9, r4
 8002960:	eb18 080a 	adds.w	r8, r8, sl
 8002964:	eb49 090b 	adc.w	r9, r9, fp
 8002968:	f04f 0100 	mov.w	r1, #0
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002974:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002978:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800297c:	4688      	mov	r8, r1
 800297e:	4691      	mov	r9, r2
 8002980:	eb1a 0508 	adds.w	r5, sl, r8
 8002984:	eb4b 0609 	adc.w	r6, fp, r9
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4619      	mov	r1, r3
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	f04f 0400 	mov.w	r4, #0
 800299a:	0094      	lsls	r4, r2, #2
 800299c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029a0:	008b      	lsls	r3, r1, #2
 80029a2:	461a      	mov	r2, r3
 80029a4:	4623      	mov	r3, r4
 80029a6:	4628      	mov	r0, r5
 80029a8:	4631      	mov	r1, r6
 80029aa:	f7fd fc0d 	bl	80001c8 <__aeabi_uldivmod>
 80029ae:	4603      	mov	r3, r0
 80029b0:	460c      	mov	r4, r1
 80029b2:	461a      	mov	r2, r3
 80029b4:	4bb8      	ldr	r3, [pc, #736]	; (8002c98 <UART_SetConfig+0x6f4>)
 80029b6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	469b      	mov	fp, r3
 80029c4:	f04f 0c00 	mov.w	ip, #0
 80029c8:	46d9      	mov	r9, fp
 80029ca:	46e2      	mov	sl, ip
 80029cc:	eb19 0309 	adds.w	r3, r9, r9
 80029d0:	eb4a 040a 	adc.w	r4, sl, sl
 80029d4:	4699      	mov	r9, r3
 80029d6:	46a2      	mov	sl, r4
 80029d8:	eb19 090b 	adds.w	r9, r9, fp
 80029dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029f4:	4689      	mov	r9, r1
 80029f6:	4692      	mov	sl, r2
 80029f8:	eb1b 0509 	adds.w	r5, fp, r9
 80029fc:	eb4c 060a 	adc.w	r6, ip, sl
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4619      	mov	r1, r3
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	f04f 0400 	mov.w	r4, #0
 8002a12:	0094      	lsls	r4, r2, #2
 8002a14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a18:	008b      	lsls	r3, r1, #2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4623      	mov	r3, r4
 8002a1e:	4628      	mov	r0, r5
 8002a20:	4631      	mov	r1, r6
 8002a22:	f7fd fbd1 	bl	80001c8 <__aeabi_uldivmod>
 8002a26:	4603      	mov	r3, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b9a      	ldr	r3, [pc, #616]	; (8002c98 <UART_SetConfig+0x6f4>)
 8002a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2164      	movs	r1, #100	; 0x64
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	3332      	adds	r3, #50	; 0x32
 8002a40:	4a95      	ldr	r2, [pc, #596]	; (8002c98 <UART_SetConfig+0x6f4>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4c:	4498      	add	r8, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	469b      	mov	fp, r3
 8002a52:	f04f 0c00 	mov.w	ip, #0
 8002a56:	46d9      	mov	r9, fp
 8002a58:	46e2      	mov	sl, ip
 8002a5a:	eb19 0309 	adds.w	r3, r9, r9
 8002a5e:	eb4a 040a 	adc.w	r4, sl, sl
 8002a62:	4699      	mov	r9, r3
 8002a64:	46a2      	mov	sl, r4
 8002a66:	eb19 090b 	adds.w	r9, r9, fp
 8002a6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a82:	4689      	mov	r9, r1
 8002a84:	4692      	mov	sl, r2
 8002a86:	eb1b 0509 	adds.w	r5, fp, r9
 8002a8a:	eb4c 060a 	adc.w	r6, ip, sl
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4619      	mov	r1, r3
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	0094      	lsls	r4, r2, #2
 8002aa2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002aa6:	008b      	lsls	r3, r1, #2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4623      	mov	r3, r4
 8002aac:	4628      	mov	r0, r5
 8002aae:	4631      	mov	r1, r6
 8002ab0:	f7fd fb8a 	bl	80001c8 <__aeabi_uldivmod>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b77      	ldr	r3, [pc, #476]	; (8002c98 <UART_SetConfig+0x6f4>)
 8002abc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	2164      	movs	r1, #100	; 0x64
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	3332      	adds	r3, #50	; 0x32
 8002ace:	4a72      	ldr	r2, [pc, #456]	; (8002c98 <UART_SetConfig+0x6f4>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	f003 020f 	and.w	r2, r3, #15
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4442      	add	r2, r8
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	e0d0      	b.n	8002c86 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f7ff fa36 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8002ae8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	469a      	mov	sl, r3
 8002aee:	f04f 0b00 	mov.w	fp, #0
 8002af2:	46d0      	mov	r8, sl
 8002af4:	46d9      	mov	r9, fp
 8002af6:	eb18 0308 	adds.w	r3, r8, r8
 8002afa:	eb49 0409 	adc.w	r4, r9, r9
 8002afe:	4698      	mov	r8, r3
 8002b00:	46a1      	mov	r9, r4
 8002b02:	eb18 080a 	adds.w	r8, r8, sl
 8002b06:	eb49 090b 	adc.w	r9, r9, fp
 8002b0a:	f04f 0100 	mov.w	r1, #0
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b1e:	4688      	mov	r8, r1
 8002b20:	4691      	mov	r9, r2
 8002b22:	eb1a 0508 	adds.w	r5, sl, r8
 8002b26:	eb4b 0609 	adc.w	r6, fp, r9
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	f04f 0400 	mov.w	r4, #0
 8002b3c:	0094      	lsls	r4, r2, #2
 8002b3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b42:	008b      	lsls	r3, r1, #2
 8002b44:	461a      	mov	r2, r3
 8002b46:	4623      	mov	r3, r4
 8002b48:	4628      	mov	r0, r5
 8002b4a:	4631      	mov	r1, r6
 8002b4c:	f7fd fb3c 	bl	80001c8 <__aeabi_uldivmod>
 8002b50:	4603      	mov	r3, r0
 8002b52:	460c      	mov	r4, r1
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <UART_SetConfig+0x6f4>)
 8002b58:	fba3 2302 	umull	r2, r3, r3, r2
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	469b      	mov	fp, r3
 8002b66:	f04f 0c00 	mov.w	ip, #0
 8002b6a:	46d9      	mov	r9, fp
 8002b6c:	46e2      	mov	sl, ip
 8002b6e:	eb19 0309 	adds.w	r3, r9, r9
 8002b72:	eb4a 040a 	adc.w	r4, sl, sl
 8002b76:	4699      	mov	r9, r3
 8002b78:	46a2      	mov	sl, r4
 8002b7a:	eb19 090b 	adds.w	r9, r9, fp
 8002b7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b96:	4689      	mov	r9, r1
 8002b98:	4692      	mov	sl, r2
 8002b9a:	eb1b 0509 	adds.w	r5, fp, r9
 8002b9e:	eb4c 060a 	adc.w	r6, ip, sl
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	f04f 0400 	mov.w	r4, #0
 8002bb4:	0094      	lsls	r4, r2, #2
 8002bb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bba:	008b      	lsls	r3, r1, #2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	4631      	mov	r1, r6
 8002bc4:	f7fd fb00 	bl	80001c8 <__aeabi_uldivmod>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	460c      	mov	r4, r1
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <UART_SetConfig+0x6f4>)
 8002bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	2164      	movs	r1, #100	; 0x64
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	3332      	adds	r3, #50	; 0x32
 8002be2:	4a2d      	ldr	r2, [pc, #180]	; (8002c98 <UART_SetConfig+0x6f4>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bee:	4498      	add	r8, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	469b      	mov	fp, r3
 8002bf4:	f04f 0c00 	mov.w	ip, #0
 8002bf8:	46d9      	mov	r9, fp
 8002bfa:	46e2      	mov	sl, ip
 8002bfc:	eb19 0309 	adds.w	r3, r9, r9
 8002c00:	eb4a 040a 	adc.w	r4, sl, sl
 8002c04:	4699      	mov	r9, r3
 8002c06:	46a2      	mov	sl, r4
 8002c08:	eb19 090b 	adds.w	r9, r9, fp
 8002c0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c10:	f04f 0100 	mov.w	r1, #0
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c24:	4689      	mov	r9, r1
 8002c26:	4692      	mov	sl, r2
 8002c28:	eb1b 0509 	adds.w	r5, fp, r9
 8002c2c:	eb4c 060a 	adc.w	r6, ip, sl
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4619      	mov	r1, r3
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	f04f 0400 	mov.w	r4, #0
 8002c42:	0094      	lsls	r4, r2, #2
 8002c44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c48:	008b      	lsls	r3, r1, #2
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4623      	mov	r3, r4
 8002c4e:	4628      	mov	r0, r5
 8002c50:	4631      	mov	r1, r6
 8002c52:	f7fd fab9 	bl	80001c8 <__aeabi_uldivmod>
 8002c56:	4603      	mov	r3, r0
 8002c58:	460c      	mov	r4, r1
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <UART_SetConfig+0x6f4>)
 8002c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	2164      	movs	r1, #100	; 0x64
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	3332      	adds	r3, #50	; 0x32
 8002c70:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <UART_SetConfig+0x6f4>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	f003 020f 	and.w	r2, r3, #15
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4442      	add	r2, r8
 8002c82:	609a      	str	r2, [r3, #8]
}
 8002c84:	e7ff      	b.n	8002c86 <UART_SetConfig+0x6e2>
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c90:	40011000 	.word	0x40011000
 8002c94:	40011400 	.word	0x40011400
 8002c98:	51eb851f 	.word	0x51eb851f

08002c9c <__libc_init_array>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	4e0d      	ldr	r6, [pc, #52]	; (8002cd4 <__libc_init_array+0x38>)
 8002ca0:	4c0d      	ldr	r4, [pc, #52]	; (8002cd8 <__libc_init_array+0x3c>)
 8002ca2:	1ba4      	subs	r4, r4, r6
 8002ca4:	10a4      	asrs	r4, r4, #2
 8002ca6:	2500      	movs	r5, #0
 8002ca8:	42a5      	cmp	r5, r4
 8002caa:	d109      	bne.n	8002cc0 <__libc_init_array+0x24>
 8002cac:	4e0b      	ldr	r6, [pc, #44]	; (8002cdc <__libc_init_array+0x40>)
 8002cae:	4c0c      	ldr	r4, [pc, #48]	; (8002ce0 <__libc_init_array+0x44>)
 8002cb0:	f000 f820 	bl	8002cf4 <_init>
 8002cb4:	1ba4      	subs	r4, r4, r6
 8002cb6:	10a4      	asrs	r4, r4, #2
 8002cb8:	2500      	movs	r5, #0
 8002cba:	42a5      	cmp	r5, r4
 8002cbc:	d105      	bne.n	8002cca <__libc_init_array+0x2e>
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cc4:	4798      	blx	r3
 8002cc6:	3501      	adds	r5, #1
 8002cc8:	e7ee      	b.n	8002ca8 <__libc_init_array+0xc>
 8002cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cce:	4798      	blx	r3
 8002cd0:	3501      	adds	r5, #1
 8002cd2:	e7f2      	b.n	8002cba <__libc_init_array+0x1e>
 8002cd4:	08002d2c 	.word	0x08002d2c
 8002cd8:	08002d2c 	.word	0x08002d2c
 8002cdc:	08002d2c 	.word	0x08002d2c
 8002ce0:	08002d30 	.word	0x08002d30

08002ce4 <memset>:
 8002ce4:	4402      	add	r2, r0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d100      	bne.n	8002cee <memset+0xa>
 8002cec:	4770      	bx	lr
 8002cee:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf2:	e7f9      	b.n	8002ce8 <memset+0x4>

08002cf4 <_init>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	bf00      	nop
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr

08002d00 <_fini>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	bf00      	nop
 8002d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d06:	bc08      	pop	{r3}
 8002d08:	469e      	mov	lr, r3
 8002d0a:	4770      	bx	lr
